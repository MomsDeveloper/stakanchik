from os import getenv

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import CallbackQuery

router = Router()
menu = [[InlineKeyboardButton(text="üí≥ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_alco"),
    InlineKeyboardButton(text="üí∞ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_bezalco")],
[InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")], 
[InlineKeyboardButton(text="üîé –ü–æ–º–æ—â—å", callback_data="help")]]
menu_markup = InlineKeyboardMarkup(inline_keyboard=menu)

cocktail_recipes = {
    "get_alco": [
        {"name": "Mojito", "recipe": "Muddle mint leaves, lime wedges, and simple syrup in a glass. Fill the glass with ice, add white rum, and top with soda water. Stir well and garnish with mint leaves and a lime wedge."},
        {"name": "Cosmopolitan", "recipe": "Shake vodka, triple sec, cranberry juice, and lime juice with ice. Strain into a martini glass and garnish with a lime wheel."},
    ],
    "get_bezalco": [
        {"name": "Virgin Mojito", "recipe": "Muddle mint leaves, lime wedges, and simple syrup in a glass. Fill the glass with ice and top with soda water. Stir well and garnish with mint leaves and a lime wedge."},
        {"name": "Mocktail", "recipe": "Shake pineapple juice, orange juice, and grenadine with ice. Strain into a glass filled with ice and garnish with a cherry and an orange slice."},
    ]
}
    
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π üçπ", reply_markup=menu_markup)

# Menu command handler
@router.message(Command("menu"))
async def show_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


class GetAlcoCallback(CallbackData, prefix="get_alco"):
    pass

class GetBezalcoCallback(CallbackData, prefix="get_bezalco"):
    pass

class AboutCallback(CallbackData, prefix="about"):
    pass

class HelpCallback(CallbackData, prefix="help"):
    pass


@router.callback_query(GetAlcoCallback.filter())
async def get_alco(call: CallbackQuery):
    await call.message.answer("–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    for cocktail in cocktail_recipes["get_alco"]:
        await call.message.answer(f"{cocktail['name']}\n{cocktail['recipe']}")
        
@router.callback_query(GetBezalcoCallback.filter())
async def get_bezalco(call: CallbackQuery):
    await call.message.answer("–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    for cocktail in cocktail_recipes["get_bezalco"]:
        await call.message.answer(f"{cocktail['name']}\n{cocktail['recipe']}")

@router.callback_query(AboutCallback.filter())
async def about(call: CallbackQuery):
    await call.message.answer("–û –Ω–∞—Å")
    await call.message.answer("–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
    
@router.callback_query(HelpCallback.filter())
async def help(call: CallbackQuery):
    await call.message.answer("–ü–æ–º–æ—â—å")
    await call.message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: georgiy.khabner@mail.ru")
    