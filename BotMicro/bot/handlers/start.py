from enum import Enum
from os import getenv

from aiogram import Bot, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from deta import Base
from utils.logging import log_to_deta
from typing import Optional, TypedDict
from aiogram import Bot


class CocktailType(Enum):
    ALCOHOLIC = "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"
    NON_ALCOHOLIC = "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"


class CocktailRecipe(TypedDict):
    name: str
    type: CocktailType
    recipe: str
    mark: float
    mark_count: int


router = Router()
database = Base("cocktails")
database_requests = Base("requests")

menu = [
    [
        InlineKeyboardButton(text="üí≥ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_alco"),
        InlineKeyboardButton(text="üí∞ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_bezalco"),
    ],
    [
        InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"),
    ],
    [
        InlineKeyboardButton(text="üîé –ü–æ–º–æ—â—å", callback_data="help"),
    ],
    [
        InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–∫—Ç–µ–π–ª—å", callback_data="offer"),
    ],
    [
        InlineKeyboardButton(text="–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫", callback_data="deep_search"),
    ]

]

menu_markup = InlineKeyboardMarkup(inline_keyboard=menu)
go_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")
# offer = InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å", callback_data="offer")
confirm_drink = InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_drink")
unconfirm_drink = InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="unconfirm_drink")
mark_drink = InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="mark_drink")

cocktail_recipes = database.fetch().items


class MenuCallback(CallbackData, prefix="menu"):
    pass

class MarkDrinkCallback(CallbackData, prefix="mark_drink"):
    pass

class OfferCallback(CallbackData, prefix="offer"):
    pass

class DeepSearchCallback(CallbackData, prefix="deep_search"):
    pass

class ConfirmOfferCallback(CallbackData, prefix="confirm_offer"):
    confirm: str


class ConfirmDrinkCallback(CallbackData, prefix="confirm_drink"):
    request_key: str

class UnconfirmDrinkCallback(CallbackData, prefix="unconfirm_drink"):
    request_key: str


class GetAlcoCallback(CallbackData, prefix="get_alco"):
    pass


class GetBezalcoCallback(CallbackData, prefix="get_bezalco"):
    pass


class AboutCallback(CallbackData, prefix="about"):
    pass


class HelpCallback(CallbackData, prefix="help"):
    pass


class CocktailSelectCallback(CallbackData, prefix="select_cocktail"):
    name: str

class MarkSelectCallback(CallbackData, prefix="mark_cocktail"):
    mark: int

class SelectCoctailTypeCallback(CallbackData, prefix="select_coctail_type"):
    type: str

class SelectFilterCallback(CallbackData, prefix="select_filter"):
    filter_name: str

class ResetFilterCallback(CallbackData, prefix="reset_filter"):
    pass

class ConfirmFilterCallback(CallbackData, prefix="confirm_filter"):
    pass

drinks_filter = [
    [
        InlineKeyboardButton(text="–ì–æ—Ä—å–∫–∏–π ‚ùå", callback_data=SelectFilterCallback(filter_name="bitter").pack()),
        InlineKeyboardButton(text="–°–ª–∞–¥–∫–∏–π ‚ùå", callback_data=SelectFilterCallback(filter_name="sweet").pack()),
        InlineKeyboardButton(text="–ö–∏—Å–ª—ã–π ‚ùå", callback_data=SelectFilterCallback(filter_name="sour").pack()),
    ],
    [
        InlineKeyboardButton(text="–ö—Ä–µ–ø–∫–∏–π ‚ùå", callback_data=SelectFilterCallback(filter_name="strong").pack()),
        InlineKeyboardButton(text="–§—Ä—É–∫—Ç–æ–≤—ã–π ‚ùå", callback_data=SelectFilterCallback(filter_name="fruity").pack()),
    ],
    [
        InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="reset_filter"),
        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="confirm_filter"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")
    ]
]



@router.message(CommandStart())
async def start(message: Message):
    # print user's chat id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π üçπ", reply_markup=menu_markup)

# Menu command handler


@router.callback_query(MenuCallback.filter())
async def show_menu(query: CallbackQuery):
    await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


@router.callback_query(OfferCallback.filter())
async def offer_drink(query: CallbackQuery):
    await query.message.edit_text("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–∫—Ç–µ–π–ª—å")
    await query.message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É?", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–î–∞", callback_data=ConfirmOfferCallback(confirm="yes").pack())],
            [InlineKeyboardButton(
                text="–ù–µ—Ç", callback_data=ConfirmOfferCallback(confirm="no").pack())]
        ]
    ))

@router.callback_query(DeepSearchCallback.filter())
async def deep_search(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫", reply_markup=InlineKeyboardMarkup(inline_keyboard=drinks_filter))

@router.callback_query(SelectFilterCallback.filter())
async def select_filter(query: CallbackQuery, callback_data: SelectFilterCallback, state: FSMContext):
    filter_map = {
        "bitter": "–ì–æ—Ä—å–∫–∏–π",
        "sweet": "–°–ª–∞–¥–∫–∏–π",
        "sour": "–ö–∏—Å–ª—ã–π",
        "strong": "–ö—Ä–µ–ø–∫–∏–π",
        "fruity": "–§—Ä—É–∫—Ç–æ–≤—ã–π"
    }

    filter_name = callback_data.filter_name
    if filter_name in filter_map:
        await state.update_data({filter_name: not (await state.get_data()).get(filter_name)})

    data = await state.get_data()
    buttons = [
        [InlineKeyboardButton(
            text=f"{filter_map[key]} {'‚úÖ' if data.get(key) else '‚ùå'}",
            callback_data=SelectFilterCallback(filter_name=key).pack()
        ) for key in ["bitter", "sweet", "sour"]],
        [InlineKeyboardButton(
            text=f"{filter_map[key]} {'‚úÖ' if data.get(key) else '‚ùå'}",
            callback_data=SelectFilterCallback(filter_name=key).pack()
        ) for key in ["strong", "fruity"]],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="reset_filter")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="confirm_filter")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")]
    ]

    await query.message.edit_text("–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(ResetFilterCallback.filter())
async def reset_filter(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω", reply_markup=InlineKeyboardMarkup(inline_keyboard=drinks_filter))

@router.callback_query(ConfirmFilterCallback.filter())
async def confirm_filter(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filters_list = ["bitter", "sweet", "sour", "strong", "fruity"]
    filters = {key: value for key, value in data.items() if key in filters_list and value}
    
    if filters:
        cocktail_recipes = database.fetch(filters).items
        await send_cocktail_menu(query.message, cocktail_recipes)
    await state.clear()

class OfferState(StatesGroup):
    wait_for_name = State()
    wait_for_type = State()
    wait_for_description = State()


@router.callback_query(ConfirmOfferCallback.filter())
async def confirm_offer(query: CallbackQuery, callback_data: ConfirmOfferCallback, state: FSMContext):
    if callback_data.confirm == "yes":
        # –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥–º–∏–Ω—É
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è")

        user_id = query.message.chat.id
        await state.update_data(user=user_id)
        await state.set_state(OfferState.wait_for_name)
    else:
        await query.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


def check_recipe(recipe: str):
    return True


@router.message(OfferState.wait_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–æ–∫—Ç–µ–π–ª—è",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π", callback_data=SelectCoctailTypeCallback(type="–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π").pack()), InlineKeyboardButton(text="–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π", callback_data=SelectCoctailTypeCallback(type="–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π").pack())]]))
    await state.set_state(OfferState.wait_for_type)


@router.callback_query(OfferState.wait_for_type, SelectCoctailTypeCallback.filter())
async def process_type(query: CallbackQuery, callback_data: SelectCoctailTypeCallback, state: FSMContext):
    cocktail_type = callback_data.type
    await state.update_data(type=cocktail_type)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è")
    await state.set_state(OfferState.wait_for_description)

@router.message(OfferState.wait_for_description)
async def process_recipe(message: Message, state: FSMContext, bot: Bot):
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –∞–¥–º–∏–Ω—É

    recipe = message.text
    await state.update_data(recipe=recipe)

    current_state = await state.get_state()

    if current_state == OfferState.wait_for_description.state:
        data = await state.get_data()
        await message.answer(data["user"])
        database_requests.put(key=str(data["user"]), data={"name": data["name"], "type": data["type"], "recipe": data["recipe"], "user": data["user"]})
        await message.answer(data["user"])
        await bot.send_message(
            f"{getenv('ADMIN_ID')}", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø—Ä–µ–¥–ª–æ–∂–∏–ª {data['type']} –∫–æ–∫—Ç–µ–π–ª—å {data['name']} —Å —Ä–µ—Ü–µ–ø—Ç–æ–º: {data['recipe']}", 
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ConfirmDrinkCallback(request_key=data["user"]).pack()),
                    InlineKeyboardButton(
                        text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=UnconfirmDrinkCallback(request_key=data["user"]).pack())
                ]
            ]))
        await state.clear()
        await message.answer("–†–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
        await state.clear()


@router.callback_query(ConfirmDrinkCallback.filter())
async def confirm_user_drink(query: CallbackQuery, callback_data: ConfirmDrinkCallback, bot: Bot):
    request_drink = database_requests.get(callback_data.request_key)
    
    if request_drink is not None:
        database.insert({"key": request_drink["name"], "name": request_drink["name"], "type": request_drink["type"], "recipe": request_drink["recipe"], "mark": "0", "mark_count": "0"})
        await query.message.edit_text("–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
        await bot.send_message(request_drink["user"], "–í–∞—à –∫–æ–∫—Ç–µ–π–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        database_requests.delete(callback_data.request_key)
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))


@router.callback_query(UnconfirmDrinkCallback.filter())
async def unconfirm_user_drink(query: CallbackQuery, callback_data: UnconfirmDrinkCallback, bot: Bot):
    request_drink = database_requests.get(callback_data.request_key)
    if request_drink is not None:
        await query.message.edit_text("–ö–æ–∫—Ç–µ–π–ª—å –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
        await bot.send_message(request_drink["user"], "–í–∞—à –∫–æ–∫—Ç–µ–π–ª—å –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        database_requests.delete(callback_data.request_key)
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))

@router.callback_query(CocktailSelectCallback.filter())
async def select_cocktail(query: CallbackQuery, callback_data: CocktailSelectCallback, state: FSMContext):
    await state.update_data(name=callback_data.name)
    # Retrieve cocktail information from the database based on its name
    cocktail: Optional[CocktailRecipe] = database.get(
        callback_data.name)  # type: ignore
    if cocktail is not None:
        await query.message.edit_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ \"{callback_data.name}\":\n{cocktail['recipe']}\n –û—Ü–µ–Ω–∫–∞: {cocktail['mark']}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[mark_drink, go_back]]))
    else:
        await query.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))


async def send_cocktail_menu(message: Message, cocktails: list):
    await message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∫—Ç–µ–π–ª—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=cocktail["name"],
                        callback_data=CocktailSelectCallback(
                            name=cocktail["name"]).pack(),
                    )
                ]
                for cocktail in cocktails
            ]  + [[go_back]]
        )
    )


@router.callback_query(MarkDrinkCallback.filter())
async def mark_user_drink(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="1", callback_data=MarkSelectCallback(mark=1).pack()), 
            InlineKeyboardButton(
                text="2", callback_data=MarkSelectCallback(mark=2).pack()),
            InlineKeyboardButton(
                text="3", callback_data=MarkSelectCallback(mark=3).pack()),
            InlineKeyboardButton(
                text="4", callback_data=MarkSelectCallback(mark=4).pack()),
            InlineKeyboardButton(
                text="5", callback_data=MarkSelectCallback(mark=5).pack()),
        ]] + [[go_back]]))
    
@router.callback_query(MarkSelectCallback.filter())
async def mark_drink_db(query: CallbackQuery, callback_data: MarkSelectCallback, state: FSMContext):
    state_data = await state.get_data()
    cocktail: Optional[CocktailRecipe] = database.get(
    state_data['name']) # type: ignore

    if cocktail is not None:
        new_mark= callback_data.mark
        cocktail['mark'] = (float(cocktail['mark'])*float(cocktail['mark_count'])+new_mark)/(float(cocktail['mark_count'])+1)
        cocktail['mark'] = round(cocktail['mark'], 2)
        cocktail['mark_count'] = int(cocktail['mark_count']) + 1
        database.put(cocktail)
        await query.message.edit_text("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
    else:
        await query.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))

@router.callback_query(GetAlcoCallback.filter())
async def get_alco(query: CallbackQuery):
    await query.message.edit_text("–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    cocktail_recipes = database.fetch({"type": "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"}).items
    await log_to_deta(
        {"fetched_cocktails": cocktail_recipes}
    )
    await send_cocktail_menu(query.message, cocktail_recipes)


@router.callback_query(GetBezalcoCallback.filter())
async def get_bezalco(query: CallbackQuery):
    await query.message.edit_text("–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    cocktail_recipes = database.fetch({"type": "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"}).items
    await send_cocktail_menu(query.message, cocktail_recipes)


@router.callback_query(AboutCallback.filter())
async def about(query: CallbackQuery):
    await query.message.edit_text("–û –Ω–∞—Å")
    await query.message.edit_text("–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))


@router.callback_query(HelpCallback.filter())
async def help(query: CallbackQuery):
    await query.message.edit_text("–ü–æ–º–æ—â—å")
    await query.message.edit_text("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: georgiy.khabner@mail.ru", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
