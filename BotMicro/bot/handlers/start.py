from enum import Enum
from os import getenv

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import CallbackQuery
from deta import Base
from utils.logging import log_to_deta
from typing import Optional, TypedDict


class CocktailType(Enum):
    ALCOHOLIC = "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"
    NON_ALCOHOLIC = "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"


class CocktailRecipe(TypedDict):
    name: str
    type: CocktailType
    recipe: str


router = Router()
database = Base("cocktails")

menu = [[InlineKeyboardButton(text="üí≥ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_alco"),
         InlineKeyboardButton(text="üí∞ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="get_bezalco")],
        [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton(text="üîé –ü–æ–º–æ—â—å", callback_data="help")]]
menu_markup = InlineKeyboardMarkup(inline_keyboard=menu)

go_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")

cocktail_recipes = database.fetch().items


class MenuCallback(CallbackData, prefix="menu"):
    pass


class GetAlcoCallback(CallbackData, prefix="get_alco"):
    pass


class GetBezalcoCallback(CallbackData, prefix="get_bezalco"):
    pass


class AboutCallback(CallbackData, prefix="about"):
    pass


class HelpCallback(CallbackData, prefix="help"):
    pass


class CocktailSelectCallback(CallbackData, prefix="select_cocktail"):
    name: str


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π üçπ", reply_markup=menu_markup)

# Menu command handler


@router.callback_query(MenuCallback.filter())
async def show_menu(query: CallbackQuery):
    await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


@router.callback_query(CocktailSelectCallback.filter())
async def select_cocktail(query: CallbackQuery, callback_data: CocktailSelectCallback):
    # Retrieve cocktail information from the database based on its name
    cocktail: Optional[CocktailRecipe] = database.get(
        callback_data.name)  # type: ignore
    if cocktail is not None:
        await query.message.edit_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ \"{callback_data.name}\":\n{cocktail['recipe']}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
    else:
        await query.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))


async def send_cocktail_menu(message: Message, cocktails: list):
    await message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∫—Ç–µ–π–ª—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=cocktail["name"],
                        callback_data=CocktailSelectCallback(
                            name=cocktail["name"]).pack(),
                    )
                ]
                for cocktail in cocktails
            ] + [[go_back]]
        )
    )


@router.callback_query(GetAlcoCallback.filter())
async def get_alco(query: CallbackQuery):
    await query.message.edit_text("–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    cocktail_recipes = database.fetch({"type": "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"}).items
    await log_to_deta(
        {"fetched_cocktails": cocktail_recipes}
    )
    await send_cocktail_menu(query.message, cocktail_recipes)


@router.callback_query(GetBezalcoCallback.filter())
async def get_bezalco(query: CallbackQuery):
    await query.message.edit_text("–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
    cocktail_recipes = database.fetch({"type": "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"}).items
    await send_cocktail_menu(query.message, cocktail_recipes)


@router.callback_query(AboutCallback.filter())
async def about(query: CallbackQuery):
    await query.message.edit_text("–û –Ω–∞—Å")
    await query.message.edit_text("–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))


@router.callback_query(HelpCallback.filter())
async def help(query: CallbackQuery):
    await query.message.edit_text("–ü–æ–º–æ—â—å")
    await query.message.edit_text("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: georgiy.khabner@mail.ru", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[go_back]]))
